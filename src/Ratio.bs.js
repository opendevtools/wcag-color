// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var HEX = require("./HEX.bs.js");
var HSL = require("./HSL.bs.js");
var Utils = require("./Utils.bs.js");
var Luminance = require("./Luminance.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_format = require("rescript/lib/js/caml_format.js");

function typeOfColor(color) {
  var match = color.substring(0, 3);
  switch (match) {
    case "hsl" :
        return /* HSL */0;
    case "rgb" :
        return /* RGB */1;
    default:
      return /* HEX */2;
  }
}

function parseNumbers(rgb) {
  var colors = rgb.match(/\d+/g);
  if (colors !== null) {
    return colors.map(function (x) {
                return Caml_format.float_of_string(Belt_Option.getWithDefault(x, ""));
              });
  } else {
    return [];
  }
}

function parseColor(color) {
  var match = typeOfColor(color);
  var tmp;
  switch (match) {
    case /* HSL */0 :
        tmp = HSL.convert(parseNumbers(color));
        break;
    case /* RGB */1 :
        tmp = parseNumbers(color);
        break;
    case /* HEX */2 :
        tmp = HEX.convert(color);
        break;
    
  }
  return Luminance.convert(tmp) + 0.05;
}

function calculate(foreground, background) {
  var match = Utils.removeHash(foreground);
  var match$1 = Utils.removeHash(background);
  if (match === match$1) {
    return 1.0;
  }
  var match$2 = parseColor(match);
  var match$3 = parseColor(match$1);
  return Number((
                match$2 > match$3 ? match$2 / match$3 : match$3 / match$2
              ).toFixed(2));
}

exports.typeOfColor = typeOfColor;
exports.parseNumbers = parseNumbers;
exports.parseColor = parseColor;
exports.calculate = calculate;
/* No side effect */
